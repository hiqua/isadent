#!/usr/bin/python3
import doctest
import re
import sys

NOINDENT_KW = ('lemma',
               'theory',
               'imports',
               'begin',
               'section',
               'subsection',
               'type_synonym',
               'locale',
               'definition',
               'abbreviation',
               'theorem',
               'end',
               'shows',
               '\(',
               'context',
               'fun',
               'inductive')

# Indent what follows, not the line itself
INDENT_KW = ('proof',
             'proof-')

# Deindent what follows, and the line itself
DEINDENT_KW = ('qed',
               ' next',
               'oops')

INDENT_TMP_KW = ('assumes',
                 'shows',
                 'fixes',
                 'and',
                 '"')

DB_INDENT_TMP_KW = ('by',
                    'using',
                    'unfolding')

DEINDENT_TMP_KW = ('next')


def remove_trailing(s):
    return s.strip()


def remove_double_spaces(s):
    return re.sub(r' +', ' ', s)


def begin_position(s):
    """
    Return -1 if s is only spaces
    >>> begin_position(" aer")
    1
    >>> begin_position("aer")
    0
    >>> begin_position("   ")
    -1
    """
    i = 0
    while i < s.__len__() and s[i] == ' ':
        i = i + 1
    if i == s.__len__():
        return -1
    else:
        return i


def get_kws(s):
    """
    Get the first word of the line, if there is one
    >>> get_kws('ultimately show "random thing"')
    'ultimately'
    >>> get_kws('qed')
    'qed'
    >>> get_kws(' proof(')
    'proof'
    >>> get_kws('next_list_Nil:')
    'next_list_Nil:'
    """
    s = s.strip()
    delimiters = ['"', ' ', '(']
    # index = [qm=s.find('"'),sp=s.find(' '),pa=s.find('(')]
    index = [s.find(a) for a in delimiters]
    index = [i for i in index if i != -1]
    if index != []:
        return s[0:max(1, min(index))].strip()
    else:
        return s[0:].strip()


def comment_depth(s, current):
    """
    Return the comment depth implied by this string
    We're gonna make some sane assumptions, namely that there are not more than
    one opening and one ending of a comment, and that they are in the good
    order.
    >>> comment_depth('text {* Random text', 0)
    1
    >>> comment_depth('text {* Random text *}', 1)
    1
    >>> comment_depth('show (* imba lemma ', 0)
    1
    >>> comment_depth(' imba lemma *) ', 1)
    0
    >>> comment_depth('proof (rule *)', 0)
    0
    >>> comment_depth('next_list_Nil: "next_list [] = [False]"|',1)
    1
    """
    depth = current
    op = re.compile('|'.join(['{\*', '\(\*']))
    cl = re.compile('|'.join(['\*}', '\*\)']))
    if op.search(s):
        depth += 1
    if cl.search(s):
        depth -= 1
    if depth >= 0:
        return depth
    else:
        return 0


def or_re(patterns):
    return re.compile('|'.join(patterns))


def adjust_indent(s):
    """
    Tells how the indent level has to be changed
    >>> adjust_indent("proof azer")
    (1, 0)
    >>> adjust_indent("qed")
    (-1, -1)
    >>> adjust_indent("proof (induct H rule: finite_induct)") == adjust_indent("proof")
    True
    >>> adjust_indent('m)" (is "?fin \<Longrightarrow> ?s1 = (\<Sum> m=0..<bd. ?ff m H)")')
    (0, 1)
    """
    pnoin = or_re(NOINDENT_KW)
    pin = or_re(INDENT_KW)
    pdein = or_re(DEINDENT_KW)
    pin_tmp = or_re(INDENT_TMP_KW)
    pdbin_tmp = or_re(DB_INDENT_TMP_KW)
    pdein_tmp = or_re(DEINDENT_TMP_KW)
    kw = get_kws(s)
    if pnoin.search(kw):
        return 0, 0
    if pdein.search(kw):
        return -1, -1
    if pin.search(kw):
        return 1, 0
    if pin_tmp.search(kw):
        return 0, 1
    if pdbin_tmp.search(kw):
        return 0, 2
    if pdein_tmp.search(kw):
        return 0, -1
    return 0, 1


def indent(s, indent_level, spaces_per_tab):
    """
    >>> indent("i",2,2)
    '    i'
    """
    if indent_level < 0:
        raise Exception
    spaces = ' ' * indent_level * spaces_per_tab
    return ''.join([spaces, s])


def main(fname, spaces_per_tab=2):
    indent_level = 0
    com_depth = 0
    with open(fname) as f:
        content = f.read().splitlines()
        content_mod = []
        for line in content:
            line = remove_double_spaces(line)
            line = remove_trailing(line)
            if not line.__len__() == 0:
                new_com_depth = comment_depth(line, com_depth)
                if com_depth != new_com_depth or com_depth > 0:
                    adj = (0, 0)
                else:
                    adj = adjust_indent(line)
                com_depth = max(0, new_com_depth)
                line = indent(line, indent_level + adj[1], spaces_per_tab)
                indent_level = indent_level + adj[0]
            content_mod.append(line)
            print(line)

if __name__ == "__main__":
    args = sys.argv[1:]
    if len(args) < 1:
        doctest.testmod()
    else:
        main(fname=args[0])
